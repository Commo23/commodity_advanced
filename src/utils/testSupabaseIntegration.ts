import { testSupabaseConnection, testSupabaseTables } from './supabaseTest'
import AutoSyncService from '../services/AutoSyncService'
import LocalStorageWatcher from '../services/LocalStorageWatcher'

export const runSupabaseIntegrationTest = async () => {
  console.log('üß™ D√©but du test d\'int√©gration Supabase...')
  
  try {
    // Test 1: Connexion Supabase
    console.log('\n1Ô∏è‚É£ Test de connexion Supabase...')
    const connectionTest = await testSupabaseConnection()
    if (!connectionTest.success) {
      throw new Error(`Connexion √©chou√©e: ${connectionTest.error}`)
    }
    console.log('‚úÖ Connexion Supabase r√©ussie')
    
    // Test 2: Tables Supabase
    console.log('\n2Ô∏è‚É£ Test des tables Supabase...')
    const tablesTest = await testSupabaseTables()
    const allTablesOk = Object.values(tablesTest).every(status => status)
    if (!allTablesOk) {
      console.warn('‚ö†Ô∏è Certaines tables ne sont pas accessibles:', tablesTest)
    } else {
      console.log('‚úÖ Toutes les tables sont accessibles')
    }
    
    // Test 3: Service AutoSync
    console.log('\n3Ô∏è‚É£ Test du service AutoSync...')
    const autoSyncService = AutoSyncService.getInstance()
    console.log(`‚úÖ Service AutoSync initialis√© (connect√©: ${autoSyncService.connectionStatus})`)
    
    // Test 4: LocalStorageWatcher
    console.log('\n4Ô∏è‚É£ Test du LocalStorageWatcher...')
    const localStorageWatcher = LocalStorageWatcher.getInstance()
    const watchedKeys = localStorageWatcher.getWatchedKeys()
    console.log(`‚úÖ LocalStorageWatcher initialis√© (cl√©s surveill√©es: ${watchedKeys.join(', ')})`)
    
    // Test 5: Simulation de changement
    console.log('\n5Ô∏è‚É£ Test de simulation de changement...')
    const testData = {
      test: true,
      timestamp: new Date().toISOString()
    }
    localStorage.setItem('calculatorState', JSON.stringify(testData))
    console.log('‚úÖ Changement simul√© dans localStorage')
    
    // Attendre un peu pour voir si la synchronisation se d√©clenche
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    console.log('\nüéâ Test d\'int√©gration Supabase termin√© avec succ√®s!')
    return {
      success: true,
      results: {
        connection: connectionTest.success,
        tables: tablesTest,
        autoSync: autoSyncService.connectionStatus,
        localStorageWatcher: watchedKeys.length > 0
      }
    }
    
  } catch (error) {
    console.error('‚ùå Test d\'int√©gration √©chou√©:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    }
  }
}

// Fonction pour tester la synchronisation manuelle
export const testManualSync = async () => {
  console.log('üîÑ Test de synchronisation manuelle...')
  
  try {
    const autoSyncService = AutoSyncService.getInstance()
    const result = await autoSyncService.performSync()
    
    if (result) {
      console.log('‚úÖ Synchronisation manuelle r√©ussie')
    } else {
      console.log('‚ùå Synchronisation manuelle √©chou√©e')
    }
    
    return result
  } catch (error) {
    console.error('‚ùå Erreur lors de la synchronisation manuelle:', error)
    return false
  }
}

// Exporter les fonctions pour utilisation dans la console du navigateur
if (typeof window !== 'undefined') {
  (window as any).testSupabaseIntegration = runSupabaseIntegrationTest
  (window as any).testManualSync = testManualSync
  console.log('üîß Fonctions de test disponibles dans la console:')
  console.log('- testSupabaseIntegration()')
  console.log('- testManualSync()')
}
